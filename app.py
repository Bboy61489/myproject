from flask import Flask, render_template, request, redirect, url_for, session, flash, send_file, get_flashed_messages
import sqlite3
from datetime import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase.pdfmetrics import stringWidth
from io import BytesIO




app = Flask(__name__)
app.secret_key = 'your-secret-key'  # ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏≤‡∏Å‡πÉ‡∏ä‡πâ session
 
def get_db_connection():
    conn = sqlite3.connect('users.db')
    conn.row_factory = sqlite3.Row
    return conn

def get_air_db_connection():
    conn = sqlite3.connect('air_system.db')
    conn.row_factory = sqlite3.Row
    return conn


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏•‡∏á chiller_data ---
def insert_data_to_db(form_data):
    try:
        conn = sqlite3.connect("kmp_energy_2025_fixed.db")
        cursor = conn.cursor()

        # ‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° HTML)
        expected_fields = [
            "date", "chiller_id", "status", "chws_setpoint", "cw_outlet",
            "compressors_run", "chiller_demand", "total_amp", "system_demand",
            "compressors_on", "cond_split", "cond_pressure", "cond_saturated_temp",
            "cond_approach", "chwr", "chws", "evap_pressure_avg", "evap_saturated_temp",
            "evap_approach", "evap_flow", "evap_pressure_drop", "ct_inlet_temp",
            "ct_outlet_temp", "input_electrical", "actual_tr"
        ]

        # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
        values = [form_data.get(field, None) for field in expected_fields]

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏™‡πà
        if len(values) != 25:
            return False, f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏™‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {len(values)} (‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤ 25)"

        cursor.execute("""
            INSERT INTO chiller_data (
                date, chiller_id, status, chws_setpoint, cw_outlet,
                compressors_run, chiller_demand, total_amp, system_demand,
                compressors_on, cond_split, cond_pressure, cond_saturated_temp,
                cond_approach, chwr, chws, evap_pressure_avg, evap_saturated_temp,
                evap_approach, evap_flow, evap_pressure_drop, ct_inlet_temp,
                ct_outlet_temp, input_electrical, actual_tr
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, values)

        conn.commit()
        conn.close()
        return True, "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"

    except Exception as e:
        return False, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {e}"





# --- ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ---
suggestion_map = {
    "Evap Pressure": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏ô‡πâ‡∏≥‡πÉ‡∏ô evaporator ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô",
    "Evap Saturated Temp": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∏‡∏î‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô",
    "Evap Approach": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡πÉ‡∏ô evaporator",
    "Evap Flow": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÑ‡∏´‡∏•‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏õ‡∏±‡πä‡∏°",
    "Evap Pressure Drop": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡πÉ‡∏ô‡∏ó‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏∏‡∏î‡∏ï‡∏±‡∏ô",
    "Cond Split": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πà‡∏≤‡∏á‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡∏Å‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏•‡πà‡∏≠‡πÄ‡∏¢‡πá‡∏ô",
    "Cond Pressure": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏ù‡∏±‡πà‡∏á‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏î‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°",
    "Cond Saturated Temp": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô",
    "Cond Approach": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏î‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå",
    "Compressors Run": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏°‡πÄ‡∏û‡∏£‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î",
    "Total Amp": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏∞‡πÅ‡∏™‡∏£‡∏ß‡∏°‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
    "CT Inlet Temp": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ô‡πâ‡∏≥‡∏£‡πâ‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏≠‡∏´‡∏•‡πà‡∏≠‡πÄ‡∏¢‡πá‡∏ô",
    "CT Outlet Temp": "‚Ü™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û Cooling Tower ‡πÄ‡∏ä‡πà‡∏ô ‡∏û‡∏±‡∏î‡∏•‡∏°, ‡∏™‡∏†‡∏≤‡∏û‡∏ô‡πâ‡∏≥, ‡∏´‡∏±‡∏ß‡∏â‡∏µ‡∏î"
    
}

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ---
def analyze_data(row):
    result_lines = []

    if not row:
        return ["‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]

    result_lines.append(f"üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {row[1]}")
    result_lines.append(f"üÜî Chiller ID: {row[2]}")
    result_lines.append(f"‚öôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {row[3]}")
    result_lines.append("")  # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î

    def check_range(label, val, unit, min_val=None, max_val=None, max_only=None):
        result_lines.append(f"{label}: {val:.2f} {unit}")
        if max_only is not None:
            result_lines.append(f"   ‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô {max_only} {unit}")
            if val > max_only:
                result_lines.append("   ‚ùå ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
                if label in suggestion_map:
                    result_lines.append(f"   ‚ùó ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {suggestion_map[label]}")
            else:
                result_lines.append("   ‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥")
        else:
            result_lines.append(f"   ‡πÄ‡∏Å‡∏ì‡∏ë‡πå: {min_val} ‚Äì {max_val} {unit}")
            if (min_val is not None and val < min_val) or (max_val is not None and val > max_val):
                result_lines.append("   ‚ùå ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
                if label in suggestion_map:
                    result_lines.append(f"   ‚ùó ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {suggestion_map[label]}")
            else:
                result_lines.append("   ‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥")
        result_lines.append("")

    # ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: Evaporator
    result_lines.append("üíß Evaporator:")
    check_range("Evap Pressure", float(row[17]), "kPa", 200, 500)
    check_range("Evap Saturated Temp", float(row[18]), "¬∞C", 2, 6)
    check_range("Evap Approach", float(row[19]), "¬∞C", 0.5, 2.5)
    check_range("Evap Flow", float(row[20]), "L/s", 60, 100)
    check_range("Evap Pressure Drop", float(row[21]), "kPa", 10, 35)

    # ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: Condenser
    result_lines.append("üå°Ô∏è Condenser:")
    check_range("Cond Split", float(row[11]), "¬∞C", 1.5, 4.0)
    check_range("Cond Pressure", float(row[12]), "kPa", 600, 1500)
    check_range("Cond Saturated Temp", float(row[13]), "¬∞C", None, None, 40.0)
    check_range("Cond Approach", float(row[14]), "¬∞C", 1.0, 3.0)

    # ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: Compressor
    result_lines.append("‚öôÔ∏è Compressor:")
    check_range("Compressors Run", float(row[6]), "‡∏ä‡∏∏‡∏î", 1, 4)

    # ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
    result_lines.append("üîå ‡πÑ‡∏ü‡∏ü‡πâ‡∏≤:")
    check_range("Total Amp", float(row[8]), "A", None, None, 300)

    # ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: Cooling Tower
    result_lines.append("üíß Cooling Tower:")
    check_range("CT Inlet Temp", float(row[22]), "¬∞C", None, None, 35.0)
    check_range("CT Outlet Temp", float(row[23]), "¬∞C", 30.4, 31)

    # COP ‡πÅ‡∏•‡∏∞ kW/ton
    try:
        compressors_run = int(row[6])
        input_kw = float(row[24])
        actual_tr = float(row[25])
        ct_inlet_temp = float(row[22])
        ct_outlet_temp = float(row[23])



        if actual_tr > 0 and input_kw > 0:
            load_kw = actual_tr * 3.517
            cop = load_kw / input_kw
            kw_per_ton = input_kw / actual_tr


            result_lines.append("üìä ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û:")
            result_lines.append(f"‚ö°Ô∏è COP (Coefficient of Performance): {cop:.2f}")
            result_lines.append("   ‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3.0")

            if cop >= 3.0:
                result_lines.append("   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ")
            else:
                result_lines.append("   ‚ùå ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≥")
                result_lines.append("   ‚ùó ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏û‡∏£‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå")
            result_lines.append("")

            result_lines.append(f"‚öôÔ∏è kW/ton: {kw_per_ton:.2f}")
            result_lines.append("   ‡πÄ‡∏Å‡∏ì‡∏ë‡πå: ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1.0")
            if kw_per_ton < 1.0:
                result_lines.append("   ‚úÖ ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏î‡∏µ")
            else:
                result_lines.append("   ‚ùå ‡πÉ‡∏ä‡πâ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                result_lines.append("   ‚ùó ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Cooling Tower")
            result_lines.append("")

         # üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Cooling Tower
            ct_delta_t = ct_inlet_temp - ct_outlet_temp
            result_lines.append("üå°Ô∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Cooling Tower:")
            result_lines.append(f"üîÅ ŒîT (Inlet - Outlet): {ct_delta_t:.2f} ¬∞C")
            if ct_delta_t >= 4.0:
                result_lines.append("   ‚úÖ Cooling Tower ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ (‚àÜT > 4¬∞C)")
            elif ct_delta_t >= 2.0:
                result_lines.append("   ‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á (‚àÜT = 2-4¬∞C)")
                result_lines.append("   ‚ùó ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏£‡∏≤‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏•‡∏°‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏±‡∏î‡∏•‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡∏â‡∏µ‡∏î‡∏ô‡πâ‡∏≥")
            else:
                result_lines.append("   ‚ùå ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏î‡∏µ (‚àÜT < 2¬∞C)")
                result_lines.append("   ‚ùó ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏±‡∏î‡∏•‡∏°, ‡∏õ‡∏±‡πä‡∏°‡∏ô‡πâ‡∏≥, ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏ô/‡∏´‡∏±‡∏ß‡∏â‡∏µ‡∏î")
            result_lines.append("")


    except Exception as e:
        result_lines.append(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì COP/kW/ton ‡∏´‡∏£‡∏∑‡∏≠ Cooling Tower: {e}")


    result_lines.append("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
    return result_lines

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏á analysis_result ---
def save_analysis_to_db(analysis_text):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å save_analysis_result() ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô GUI
    ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö input ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö multi‚Äêline (analysis_text)
    ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ SQLite ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á analysis_result
    """
    try:
        # 1) ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
        if not analysis_text.strip() or "üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" not in analysis_text or "üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•" not in analysis_text:
            return False, "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"

        lines = analysis_text.splitlines()

        # 2) ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: date, chiller_id, status
        date = ""
        chiller = ""
        status = ""
        for line in lines:
            if line.startswith("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"):
                parts = line.split(":", 1)
                if len(parts) > 1:
                    date = parts[1].strip()
            elif line.startswith("üÜî Chiller ID"):
                parts = line.split(":", 1)
                if len(parts) > 1:
                    chiller = parts[1].strip()
            elif line.startswith("‚öôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"):
                parts = line.split(":", 1)
                if len(parts) > 1:
                    status = parts[1].strip()

        cop_value = None
        kw_per_ton = None
        cop_comment = ""
        suggestions = []

        for line in lines:
            # ‡∏´‡∏≤ COP: ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á "‚ö°Ô∏è COP (Coefficient of Performance): 3.65"
            if line.startswith("‚ö°Ô∏è COP") and ":" in line:
                try:
                    cop_value = float(line.split(":")[1].strip())
                    cop_comment = line.strip()
                except:
                    cop_value = None
            # ‡∏´‡∏≤ kW/ton: ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á "‚öôÔ∏è kW/ton: 0.95"
            if line.startswith("‚öôÔ∏è kW/ton") and ":" in line:
                try:
                    kw_per_ton = float(line.split(":")[1].strip())
                except:
                    kw_per_ton = None
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "‚ùó" ‡∏´‡∏£‡∏∑‡∏≠ "‚Ü™")
            if line.strip().startswith("‚ùó") or line.strip().startswith("‚Ü™"):
                suggestions.append(line.strip())

        # 3) ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SQLite ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡∏∂‡∏á row ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å chiller_data
        conn = sqlite3.connect("kmp_energy_2025_fixed.db")
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM chiller_data ORDER BY id DESC LIMIT 1")
        row = cursor.fetchone()
        if not row:
            conn.close()
            return False, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• chiller_data"

        # 4) ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å row ‡∏ï‡∏≤‡∏° index ‡πÄ‡∏î‡∏¥‡∏°
        evap_pressure          = row[17]
        evap_saturated_temp     = row[18]
        evap_approach           = row[19]
        evap_flow               = row[20]
        evap_pressure_drop      = row[21]
        cond_split              = row[11]
        cond_pressure           = row[12]
        cond_saturated_temp     = row[13]
        cond_approach           = row[14]
        compressors_run         = row[6]
        total_amp               = row[8]
        ct_inlet_temp           = row[22]
        ct_outlet_temp          = row[23]
        input_electrical        = row[24]

        summary = "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
        status_flag = "normal" if ("‚úÖ" in analysis_text and "‚ùå" not in analysis_text) else "warning"
        suggestions_str = "\n".join(suggestions)

        # 5) INSERT ‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á analysis_result
        cursor.execute("""
            INSERT INTO analysis_result (
                date, chiller_id, status,
                evap_pressure, evap_saturated_temp, evap_approach, evap_flow, evap_pressure_drop,
                cond_split, cond_pressure, cond_saturated_temp, cond_approach,
                compressors_run, total_amp,
                ct_inlet_temp, ct_outlet_temp,
                input_electrical, cop,
                summary, suggestions, status_flag,
                result_comment, kw_per_ton
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            date, chiller, status,
            evap_pressure, evap_saturated_temp, evap_approach, evap_flow, evap_pressure_drop,
            cond_split, cond_pressure, cond_saturated_temp, cond_approach,
            compressors_run, total_amp,
            ct_inlet_temp, ct_outlet_temp,
            input_electrical, cop_value,
            summary, suggestions_str, status_flag,
            cop_comment, kw_per_ton
        ))
        conn.commit()
        conn.close()
        return True, "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
    except Exception as e:
        return False, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•: {e}"

# --- ROUTES ---

@app.route('/', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = get_db_connection()
        user = conn.execute(
            'SELECT * FROM users WHERE username = ? AND password = ?', 
            (username, password)
        ).fetchone()
        conn.close()
        if user:
            session['username'] = user['username']
            session['role'] = user['role']
            session['login_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            return redirect(url_for('dashboard'))
        else:
            flash('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'warning')
    return render_template('login.html')

@app.route('/dashboard')
def dashboard():
    if 'username' not in session:
        return redirect(url_for('login'))
    return render_template('dashboard.html', username=session['username'], role=session['role'])

@app.route('/data-entry', methods=['GET', 'POST'])
def data_entry():
    analysis = []

    if request.method == 'POST':
        action = request.form.get("action", "")

        if action == "save_data":
            form_data = request.form.to_dict()
            required_fields = [
                "date", "chiller_id", "status", "chws_setpoint", "cw_outlet",
                "compressors_run", "chiller_demand", "total_amp", "system_demand",
                "compressors_on", "cond_split", "cond_pressure", "cond_saturated_temp",
                "cond_approach", "chwr", "chws", "evap_pressure_avg", "evap_saturated_temp",
                "evap_approach", "evap_flow", "evap_pressure_drop", "ct_inlet_temp",
                "ct_outlet_temp", "input_electrical","actual_tr"
            ]
            missing = [field for field in required_fields if not form_data.get(field, "").strip()]
            if missing:
                flash("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö: " + ", ".join(missing), "warning")
            else:
                success, message = insert_data_to_db(form_data)
                flash(message, "success" if success else "danger")
                if success:
                    try:
                        conn = sqlite3.connect("kmp_energy_2025_fixed.db")
                        cursor = conn.cursor()
                        cursor.execute("SELECT * FROM chiller_data ORDER BY id DESC LIMIT 1")
                        row = cursor.fetchone()
                        conn.close()
                        if row:
                            analysis = analyze_data(row)
                            session['analysis_text'] = "\n".join(analysis)
                    except Exception as e:
                        analysis = [f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}"]

        elif action == "analyze":
            try:
                conn = sqlite3.connect("kmp_energy_2025_fixed.db")
                cursor = conn.cursor()
                cursor.execute("SELECT * FROM chiller_data ORDER BY id DESC LIMIT 1")
                row = cursor.fetchone()
                conn.close()
                if row:
                    analysis = analyze_data(row)
                    session['analysis_text'] = "\n".join(analysis)
                else:
                    analysis = ["‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"]
                    session['analysis_text'] = "\n".join(analysis)
            except Exception as e:
                analysis = [f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}"]
                session['analysis_text'] = "\n".join(analysis)

    else:
        try:
            conn = sqlite3.connect("kmp_energy_2025_fixed.db")
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM chiller_data ORDER BY id DESC LIMIT 1")
            row = cursor.fetchone()
            conn.close()
            if row:
                analysis = analyze_data(row)
                session['analysis_text'] = "\n".join(analysis)
        except Exception as e:
            analysis = [f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}"]
            session['analysis_text'] = "\n".join(analysis)

    analysis_text = session.get('analysis_text', '')
    return render_template('data-entry.html', analysis=analysis_text)


@app.route('/save-analysis', methods=['POST'])
def save_analysis():
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å textarea ‡∏ä‡∏∑‡πà‡∏≠ "analysis"
    analysis_text = request.form.get("analysis", "").strip()
    success, message = save_analysis_to_db(analysis_text)
    flash(message, "success" if success else "warning")
    
    # ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô session ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ß‡πà‡∏≤‡∏á
    session['analysis_text'] = ""
    
    return redirect(url_for('data_entry'))




@app.route('/export-pdf')
def export_pdf():
    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    # Register Thai font
    pdfmetrics.registerFont(TTFont('Sarabun', 'fonts/Sarabun-Regular.ttf'))

    analysis_text = session.get('analysis_text', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå')

    p.setFont("Sarabun", 16)
    p.drawString(50, height - 50, "üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô")

    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    p.setFont("Sarabun", 10)
    p.drawRightString(width - 50, height - 50, f"‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠: {now}")

    p.setFont("Sarabun", 12)
    y = height - 100
    for line in analysis_text.splitlines():
        if y < 50:
            p.showPage()
            p.setFont("Sarabun", 12)
            y = height - 50
        p.drawString(50, y, line)
        y -= 18

    p.save()
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name="‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå.pdf", mimetype='application/pdf')





# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö air compressor======================================================================================================

@app.route('/air-system', methods=['GET', 'POST'])
def air_system():
    analysis = []

    if request.method == 'POST':
        form = request.form.to_dict()
        action = form.get("action")

        if action == "save":
            success, msg = save_air_data_from_form(form)
            flash(msg, "success" if success else "danger")

        elif action == "analyze":
            analysis = analyze_air_system_by_unit()

        else:
            flash("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö action", "warning")

    return render_template("air_system.html", analysis=analysis)


def save_air_data(form):
    try:
        conn = get_air_db_connection()
        cur = conn.cursor()

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å compressor_data
        cur.execute("""
            INSERT INTO compressor_data (date, compressor_name, outlet_pressure, outlet_temp)
            VALUES (?, ?, ?, ?)
        """, (
            form.get("date"),
            form.get("compressor_name"),
            float(form.get("outlet_pressure")),
            float(form.get("outlet_temp"))
        ))

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å dryer_data
        cur.execute("""
            INSERT INTO dryer_data (date, dew_point, dryer_delta_t)
            VALUES (?, ?, ?)
        """, (
            form.get("date"),
            float(form.get("dew_point")),
            float(form.get("dryer_delta_t"))
        ))

        conn.commit()
        conn.close()
        return True, "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Air System ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    except Exception as e:
        return False, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"
def analyze_air_system(form):
    result = []
    try:
        pressure = float(form.get("outlet_pressure"))
        temp = float(form.get("outlet_temp"))
        dew_point = float(form.get("dew_point"))
        delta_t = float(form.get("dryer_delta_t"))

        result.append("üìã ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®:")
        result.append(f"üîπ ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏Ç‡∏≤‡∏≠‡∏≠‡∏Å: {pressure:.1f} bar")
        if pressure < 6 or pressure > 8:
            result.append("   ‚ùå ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: ‡πÅ‡∏£‡∏á‡∏î‡∏±‡∏ô‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 6‚Äì8 bar")
        else:
            result.append("   ‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥")

        result.append(f"üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏•‡∏°‡∏Ç‡∏≤‡∏≠‡∏≠‡∏Å: {temp:.1f} ¬∞C")
        if temp > 45:
            result.append("   ‚ùå ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô")
        else:
            result.append("   ‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥")

        result.append(f"üíß Dew Point: {dew_point:.1f} ¬∞C")
        if dew_point > 10:
            result.append("   ‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Air Dryer")
        else:
            result.append("   ‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥")

        result.append(f"ŒîT ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á Dryer: {delta_t:.1f} ¬∞C")
        if delta_t < 5:
            result.append("   ‚ö†Ô∏è ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô")
        else:
            result.append("   ‚úÖ ‡∏õ‡∏Å‡∏ï‡∏¥")

        result.append("üìå ‡∏™‡∏£‡∏∏‡∏õ: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        return result
    except Exception as e:
        return [f"‚ùå ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}"]

def save_air_data_from_form(form):
    try:
        conn = get_air_db_connection()
        cur = conn.cursor()

        date = form.get("date")

        # 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å compressor_data (C1‚ÄìC3)
        for i in range(1, 4):
            unit = f"C{i}"
            values = [
                form.get(f"comp_{i}_status"),
                float(form.get(f"comp_{i}_energy") or 0),
                float(form.get(f"comp_{i}_run_hour") or 0),
                float(form.get(f"comp_{i}_load_hour") or 0),
                float(form.get(f"comp_{i}_pressure") or 0),
                float(form.get(f"comp_{i}_temperature") or 0)
            ]
            cur.execute("""
                INSERT INTO compressor_data (date, unit, status, energy_kwh, run_hour, load_hour, pressure, temperature)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (date, unit, *values))

        # 2. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å air dryer data
        for i in range(1, 4):
            unit = f"AD{i}"
            values = [
                form.get(f"dryer_{i}_status"),
                float(form.get(f"dryer_{i}_dew_point") or 0),
                float(form.get(f"dryer_{i}_pressure") or 0),
                form.get(f"dryer_{i}_alarm")
            ]
            cur.execute("""
                INSERT INTO airdryer_data (date, unit, status, dew_point, pressure, alarm)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (date, unit, *values))

        # 3. summary_data
        cur.execute("""
            INSERT INTO summary_data (date, total_airflow, avg_pressure, total_energy, note)
            VALUES (?, ?, ?, ?, ?)
        """, (
            date,
            float(form.get("total_airflow") or 0),
            float(form.get("avg_pressure") or 0),
            float(form.get("total_energy") or 0),
            form.get("note")
        ))

        conn.commit()
        conn.close()
        return True, "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
    except Exception as e:
        return False, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"
def analyze_air_system_by_unit():
    try:
        conn = get_air_db_connection()
        cur = conn.cursor()

        cur.execute("SELECT date FROM summary_data ORDER BY date DESC LIMIT 1")
        row = cur.fetchone()
        if not row:
            return ["‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô summary_data"]
        date = row[0]

        report = [f"üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date}", "-"*40]

        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Compressor C1‚ÄìC3
        cur.execute("SELECT unit, energy_kwh, run_hour, load_hour, pressure, temperature FROM compressor_data WHERE date = ? ORDER BY unit", (date,))
        compressors = cur.fetchall()
        for c in compressors:
            unit, energy, run_hr, load_hr, pressure, temp = c
            report.append(f"üßä Compressor {unit}:")

            if energy < 100 or energy > 250:
                report.append(f"‚ö° ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô: {energy:.1f} kWh ‚ùå ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏Ñ‡∏ß‡∏£ 100‚Äì250)")
                report.append("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏´‡∏•‡∏î, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î, ‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏π‡∏á‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
            else:
                report.append(f"‚ö° ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô: {energy:.1f} kWh ‚úÖ")

            if pressure < 6.0 or pressure > 8.0:
                report.append(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô: {pressure:.1f} bar ‚ùå ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏Ñ‡∏ß‡∏£ 6‚Äì8)")
                report.append("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡πà‡∏ß, ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡∏Å, ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Pressure Switch")
            else:
                report.append(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô: {pressure:.1f} bar ‚úÖ")

            if temp > 45:
                report.append(f"üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {temp:.1f} ¬∞C ‚ùå ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                report.append("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô, ‡∏û‡∏±‡∏î‡∏•‡∏°, ‡∏ô‡πâ‡∏≥‡∏´‡∏•‡πà‡∏≠‡πÄ‡∏¢‡πá‡∏ô, ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏£‡∏≤‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡∏±‡∏ô")
            else:
                report.append(f"üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: {temp:.1f} ¬∞C ‚úÖ")

            if run_hr > 0 and load_hr / run_hr < 0.5:
                report.append(f"‚è±Ô∏è Load ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ({load_hr:.1f}) ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 50% ‡∏Ç‡∏≠‡∏á Run ({run_hr:.1f}) ‚ùó")
                report.append("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: Compressor ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô Idle ‡∏ô‡∏≤‡∏ô ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤ Load Matching ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏õ‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
            else:
                report.append(f"‚è±Ô∏è Run: {run_hr:.1f} hr / Load: {load_hr:.1f} hr ‚úÖ")

            report.append("")

        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Air Dryer AD1‚ÄìAD3
        cur.execute("SELECT unit, dew_point, pressure, alarm FROM airdryer_data WHERE date = ? ORDER BY unit", (date,))
        dryers = cur.fetchall()
        for d in dryers:
            unit, dew_point, pressure, alarm = d
            report.append(f"üí® Air Dryer {unit}:")

            if dew_point > 10:
                report.append(f"üå°Ô∏è Dew Point: {dew_point:.1f} ¬∞C ‚ùå ‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ")
                report.append("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡∏Ç‡∏≠‡∏á Dryer, ‡∏™‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô, ‡∏´‡∏£‡∏∑‡∏≠ bypass ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î")
            else:
                report.append(f"üå°Ô∏è Dew Point: {dew_point:.1f} ¬∞C ‚úÖ")

            if pressure < 6.0 or pressure > 8.0:
                report.append(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô: {pressure:.1f} bar ‚ùå ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥")
                report.append("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Dryer, bypass valve, ‡∏´‡∏£‡∏∑‡∏≠ blockage ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô dryer")
            else:
                report.append(f"üìà ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô: {pressure:.1f} bar ‚úÖ")

            if alarm and alarm.strip().lower() in ["on", "true", "1"]:
                report.append(f"üö® Alarm: ON ‚ùå ‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
                report.append("üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Dryer ‡∏´‡∏£‡∏∑‡∏≠ reset ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á")
            else:
                report.append(f"üö® Alarm: OFF ‚úÖ")

            report.append("")

        conn.close()
        report.append("üìå ‡∏™‡∏£‡∏∏‡∏õ: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        return report

    except Exception as e:
        return [f"‚ùå ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}"]
    
@app.route('/save-air-analysis', methods=['POST'])
def save_air_analysis():
    analysis_text = request.form.get("analysis_text", "")
    if not analysis_text.strip():
        flash("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå", "warning")
        return redirect(url_for('air_system'))

    try:
        conn = get_air_db_connection()
        conn.execute("""
            INSERT INTO analysis_result (date, category, item, status, suggestion, severity, timestamp)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            datetime.now().strftime("%Y-%m-%d"),
            "air_system",
            "summary",  # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ "ALL" ‡∏´‡∏£‡∏∑‡∏≠ "-" ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö
            "N/A",
            analysis_text,
            "info",
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ))
        conn.commit()
        conn.close()
        flash("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", "success")
    except Exception as e:
        flash(f"‚ùå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}", "danger")

    return redirect(url_for('air_system'))

@app.route('/export_air_analysis_pdf', methods=['POST'])
def export_air_analysis_pdf():
    analysis_text = request.form.get("analysis_text", "")

    # ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå Sarabun ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ + ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥ (‡∏´‡∏≤‡∏Å‡πÑ‡∏î‡πâ)
    pdfmetrics.registerFont(TTFont('Sarabun', 'fonts/Sarabun-Regular.ttf'))

    buffer = BytesIO()
    p = canvas.Canvas(buffer, pagesize=A4)
    p.setFont("Sarabun", 12)

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    x_margin = 50
    y = 800
    line_height = 20
    max_width = A4[0] - 2 * x_margin  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© - margin

    # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πà‡∏≠‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô <pre>
    for line in analysis_text.split('\n'):
        # ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©
        while stringWidth(line, "Sarabun", 12) > max_width:
            # ‡∏´‡∏≤‡∏à‡∏∏‡∏î‡∏ï‡∏±‡∏î‡πÉ‡∏Å‡∏•‡πâ max_width
            split_index = len(line)
            while stringWidth(line[:split_index], "Sarabun", 12) > max_width and split_index > 0:
                split_index -= 1
            p.drawString(x_margin, y, line[:split_index])
            line = line[split_index:]
            y -= line_height
            if y < 50:
                p.showPage()
                p.setFont("Sarabun", 12)
                y = 800
        p.drawString(x_margin, y, line)
        y -= line_height

        if y < 50:
            p.showPage()
            p.setFont("Sarabun", 12)
            y = 800

    p.save()
    buffer.seek(0)
    return send_file(buffer, as_attachment=True, download_name='air_analysis_report.pdf', mimetype='application/pdf')

#==============================================================================================================================



# üîß ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∏‡∏î‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏ü Zone A1-A16
# ‡∏ä‡∏±‡πâ‡∏ô 1: ‡πÇ‡∏ã‡∏ô A1-A13
LIGHTS_FLOOR1 = {
    f"zone_a{i}": {
        "name": f"‡πÇ‡∏ã‡∏ô A{i}",
        "on_url": f"http://192.168.4.30/SetDyNet.cgi?A={i}&C=1&L=100",
        "off_url": f"http://192.168.4.30/SetDyNet.cgi?A={i}&C=1&L=0"
    }
    for i in range(1, 14)
}

# ‡∏ä‡∏±‡πâ‡∏ô 2: ‡πÇ‡∏ã‡∏ô B1-B16 (Address ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 101 ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
LIGHTS_FLOOR2 = {
    f"zone_b{i}": {
        "name": f"‡πÇ‡∏ã‡∏ô B{i}",
        "on_url": f"http://192.168.4.30/SetDyNet.cgi?A={i+100}&C=1&L=100",  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô A ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå Controller ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á
        "off_url": f"http://192.168.4.30/SetDyNet.cgi?A={i+100}&C=1&L=0"
    }
    for i in range(1, 17)
}

# ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô 1 Dictionary
ALL_LIGHTS = {**LIGHTS_FLOOR1, **LIGHTS_FLOOR2}


@app.route('/light-control')
def light_control():
    light_statuses = session.get('light_status', {lid: 'off' for lid in ALL_LIGHTS})

    lights_floor1 = [
        {
            "id": lid,
            "name": data["name"],
            "status": light_statuses.get(lid, 'off')
        }
        for lid, data in LIGHTS_FLOOR1.items()
    ]

    lights_floor2 = [
        {
            "id": lid,
            "name": data["name"],
            "status": light_statuses.get(lid, 'off')
        }
        for lid, data in LIGHTS_FLOOR2.items()
    ]

    return render_template('light_control.html', lights_floor1=lights_floor1, lights_floor2=lights_floor2)


@app.route('/toggle-light', methods=['POST'])
def toggle_light():
    light_id = request.form.get("id")
    status = request.form.get("status")

    if light_id in ALL_LIGHTS and status in ["on", "off"]:
        url = ALL_LIGHTS[light_id][f"{status}_url"]
        try:
            requests.get(url, timeout=2)
        except:
            pass

        light_statuses = session.get('light_status', {})
        light_statuses[light_id] = status
        session['light_status'] = light_statuses

    return redirect(url_for('light_control'))






#========================================================================================================================

@app.route('/user-management', methods=['GET', 'POST'])
def user_management():
    if 'username' not in session or session['role'] != 'admin':
        return redirect(url_for('login'))

    conn = get_db_connection()

    if request.method == 'POST':
        if 'add_user' in request.form:
            new_user = request.form['new_username']
            new_pass = request.form['new_password']
            new_role = request.form['new_role']
            try:
                conn.execute(
                    'INSERT INTO users (username, password, role) VALUES (?, ?, ?)',
                    (new_user, new_pass, new_role)
                )
                conn.commit()
                flash(f'‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {new_user} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
            except sqlite3.IntegrityError:
                flash('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß')
        elif 'change_password' in request.form:
            target_user = request.form['target_username']
            new_password = request.form['new_password']
            conn.execute(
                'UPDATE users SET password=? WHERE username=?',
                (new_password, target_user)
            )
            conn.commit()
            flash(f'‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô {target_user} ‡πÅ‡∏•‡πâ‡∏ß')
        elif 'delete_user' in request.form:
            user_to_delete = request.form['target_username']
            if user_to_delete == session['username']:
                flash('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ')
            else:
                conn.execute(
                    'DELETE FROM users WHERE username=?',
                    (user_to_delete,)
                )
                conn.commit()
                flash(f'‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_to_delete} ‡πÅ‡∏•‡πâ‡∏ß')

    users = conn.execute('SELECT username, role FROM users').fetchall()
    conn.close()
    return render_template('user_management.html', users=users)

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(debug=True)




